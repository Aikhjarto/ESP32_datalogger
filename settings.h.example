#ifndef SETTINGS_H
#define SETTINGS_H

/*****************************************************************************/
/* includes */
/*****************************************************************************/
#include <esp32-hal-gpio.h>   // for pin definitions

/*****************************************************************************/
/* Network and time settings */
/*****************************************************************************/
#define WIFI_SSID             "ESSID"
#define WIFI_PASSWORD         "password1234"

#define MQTT_URI              "mqtt://test.mosquitto.org/:1883"
#define MQTT_PREFIX           "sketch"
#define MQTT_USERNAME         NULL
#define MQTT_PASSWORD         NULL

#define NTPSERVER             "pool.ntp.org"
#define TZ_INFO               "EST+5 
# https://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html


/*****************************************************************************/
/* Misc Settings */
/*****************************************************************************/
#define STATUSLED_PIN         GPIO_NUM_19  // high when operating, low when in deep-sleep
#define WAKEUP_PIN            GPIO_NUM_4   // when connected to 3.3V via pushbutton, ePaper refresh is performed
/* if SENSOR_VALUES_AS_JSON is defined, {"epoch":13949503,"value":2.33} is published instead of only 2.33 */
#define SENSOR_VALUES_AS_JSON 

/*****************************************************************************/
/* Sleep and Wake Cycles */
/*****************************************************************************/
// initial values for wake-up timing (might get overwritten by MQTT messages)
#define SLEEP_SECONDS                 15
#define WIFI_CONNECT_EVERY_Nth_LOOP   10
#define DISPLAY_UPDATE_EVERY_Nth_LOOP 5
#define HISTORY_LENGTH                100

/*****************************************************************************/
/* DS18B20 OneWire Temperature Sensors */
/*****************************************************************************/
// Pins
#define ONE_WIRE_BUS_PIN      GPIO_NUM_33  // don't forget external pull-up (4k7 resistor between ONE_WIRE_BUS_PIN and ONE_WIRE_PWR_PIN )
#define ONE_WIRE_PWR_PIN      GPIO_NUM_32  // Output pin to enable/disable supply to the bus
#define ONE_WIRE_PWR_RTC_PIN  GPIO_NUM_9   // in ULP, Pin numbering is different, thus ONE_WIRE_PWR_PIN needs to be defined twice

// total number of OwnWire Temperature Sensors
const size_t OW_SERIALS_LEN = 5;

// serial numbers to enumerate for DS18B20 sensors
const uint8_t OW_SERIALS[][8] = {
  { 0x28, 0xB8, 0x6D, 0x91, 0x13, 0x21, 0x01, 0xDE },
  { 0x28, 0x72, 0xD3, 0x94, 0x13, 0x21, 0x01, 0xE2 },
  { 0x28, 0xCA, 0x19, 0x88, 0x13, 0x21, 0x01, 0xF1 },
  { 0x28, 0x4E, 0xAF, 0x89, 0x13, 0x21, 0x01, 0x9B },
  { 0x28, 0x85, 0x8A, 0x8E, 0x13, 0x21, 0x01, 0x50 },
};

// names for the MQTT topics for the temperature sensors in same order as OW_SERIALS
static const char* const TEMPERATURE_SENSOR_NAMES[] = {"Vorlauftemperatur Kreis 1", 
                                                       "Rücklauftemperatur Kreis 1",
                                                       "Vorlauftemperatur Kreis 2", 
                                                       "Rücklauftemperatur Kreis 2",
                                                       "Buffertemperatur",
                                                       };

/*****************************************************************************/
/* OLED settings for Heltec ESP32 Kit with integrated display */
/*****************************************************************************/
#define OLED_I2C_INTERFACE_NUM  1           // I2C interface number. Default pins: 0: 21/22 1: Pins 4/15
#define OLED_SCREEN_WIDTH       128         // OLED display width in pixels
#define OLED_SCREEN_HEIGHT      64          // OLED display height in pixels
#define OLED_RESET_PIN          GPIO_NUM_16 
#define OLED_SDA_PIN            GPIO_NUM_4  
#define OLED_SCL_PIN            GPIO_NUM_15

#define STATUSLED_PIN           GPIO_NUM_25

#define VBAT_PIN                GPIO_NUM13  // analog input pin
#define VBAT_DIV_RATIO          ((float)3.0)// Voltage divider ratio 


/*****************************************************************************/
/* Waveshare ePaper */
/*****************************************************************************/
#define EPAPER_PWR_PIN        GPIO_NUM_23 // ESP->ePaper VCC pin
#define EPAPER_BUSY_PIN       GPIO_NUM_25 // ePaper->ESPhigh when ePaper is busy
#define EPAPER_RST_PIN        GPIO_NUM_26 // ESP->ePaper reset pin to wake display up
#define EPAPER_DC_PIN         GPIO_NUM_27 // ESP->ePaper switch between data and command transfer
#define EPAPER_SPI_CLK_PIN    GPIO_NUM_13
#define EPAPER_SPI_MISO_PIN   GPIO_NUM_12 // unused by this project but required for SPI configuration
#define EPAPER_SPI_MOSI_PIN   GPIO_NUM_14
#define EPAPER_SPI_CS_PIN     GPIO_NUM_15
#define EPAPER_UPDATE_EVERY_Nth_LOOP  4

/*****************************************************************************/
/* digital inputs */
/*****************************************************************************/
#define DIs_LEN (size_t)1 // maximum of 8 since to save memory DI states are stored as bits in a uint_8 array.
const gpio_num_t DIs[] = { GPIO_NUM_35, };

// names for digital input signals
static const char* const DI_SENSOR_NAMES[] = {"Vorlaufpumpe Kreis 1",};

// boolean array whether or not the logic values should be inversd
const bool DI_INV[] = {true,};

#endif